name: AutomationScout CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  # Security and Code Quality
  security-audit:
    name: Security & Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit
        continue-on-error: true

      - name: Run dependency vulnerability check
        run: |
          npx audit-ci --config .audit-ci.json
        continue-on-error: true

  # Build and Test Admin Portal
  build-admin-portal:
    name: Build Admin Portal
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build admin portal
        run: |
          cd apps/admin-portal
          # Validate JavaScript files
          node -c real-automation-scout-api.cjs
          node -c real-automation-scout-portal.js
          echo "✅ Admin portal JavaScript files validated"

      - name: Test API endpoints
        run: |
          cd apps/admin-portal
          # Start API server in background
          timeout 30s node real-automation-scout-api.cjs &
          API_PID=$!
          
          # Wait for server to start
          sleep 5
          
          # Test health endpoint
          curl -f http://localhost:3001/api/system/health || exit 1
          
          # Kill API server
          kill $API_PID || true
          
          echo "✅ API endpoints tested successfully"

      - name: Validate HTML structure
        run: |
          cd apps/admin-portal
          # Check if critical files exist
          test -f real-admin-portal.html || exit 1
          test -f real-automation-scout-portal.js || exit 1
          test -f real-automation-scout-api.cjs || exit 1
          echo "✅ Critical admin portal files validated"

  # Build Widget Components
  build-widget:
    name: Build AutomationScout Widget
    runs-on: windows-latest
    needs: security-audit
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Windows components
        run: |
          # Validate Windows-specific components
          if (Test-Path "apps/daemon-win") {
            Write-Host "✅ Windows daemon components found"
          }
          if (Test-Path "apps/tray-ui") {
            Write-Host "✅ Tray UI components found"
          }

      - name: Package widget installer
        run: |
          # Create widget package
          if (Test-Path "production-package") {
            Write-Host "✅ Production package structure validated"
            Get-ChildItem production-package -Recurse | Write-Host
          }

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-admin-portal, build-widget]
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: automationscout_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start AutomationScout API
        run: |
          cd apps/admin-portal
          node real-automation-scout-api.cjs &
          echo $! > api.pid
          sleep 5

      - name: Run integration tests
        run: |
          # Test widget registration flow
          curl -X POST http://localhost:3001/api/widget/register \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "test-client",
              "widgetId": "test-widget-001",
              "systemInfo": {"version": "1.0.0", "os": "test"},
              "capabilities": ["file_monitoring", "workflow_detection"]
            }'
          
          # Test client creation
          curl -X POST http://localhost:3001/api/clients \
            -H "Content-Type: application/json" \
            -d '{
              "name": "Test Client",
              "email": "test@example.com",
              "company": "Test Corp",
              "type": "individual"
            }'
          
          # Test dashboard stats
          curl -f http://localhost:3001/api/dashboard/stats
          
          echo "✅ Integration tests completed"

      - name: Cleanup
        run: |
          if [ -f apps/admin-portal/api.pid ]; then
            kill $(cat apps/admin-portal/api.pid) || true
          fi

  # Linting and Code Quality
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          # Run ESLint on JavaScript files
          npx eslint "**/*.{js,cjs}" --ignore-path .gitignore --max-warnings 0
        continue-on-error: true

      - name: Run Prettier check
        run: |
          # Check code formatting
          npx prettier --check "**/*.{js,cjs,html,css,json,md}" --ignore-path .gitignore
        continue-on-error: true

      - name: Analyze bundle size
        run: |
          # Analyze JavaScript bundle sizes
          cd apps/admin-portal
          du -sh *.js *.cjs *.html
          echo "📊 Bundle size analysis completed"

  # Documentation and README validation
  documentation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate README files
        run: |
          # Check critical documentation exists
          test -f README.md || exit 1
          test -f CLIENT_DEPLOYMENT_GUIDE.md || exit 1
          echo "✅ Core documentation validated"

      - name: Check links in documentation
        run: |
          # Basic link validation for markdown files
          find . -name "*.md" -exec echo "Checking {}" \;
          echo "📖 Documentation link check completed"

  # Deployment preparation
  prepare-deployment:
    name: Prepare Deployment Artifacts
    runs-on: ubuntu-latest
    needs: [integration-tests, code-quality]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create deployment package
        run: |
          # Create production deployment package
          mkdir -p deployment-package
          
          # Copy admin portal
          cp -r apps/admin-portal deployment-package/
          
          # Copy production components
          if [ -d "production-package" ]; then
            cp -r production-package deployment-package/
          fi
          
          # Copy documentation
          cp README.md deployment-package/
          cp CLIENT_DEPLOYMENT_GUIDE.md deployment-package/
          
          # Create version info
          echo "VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)" > deployment-package/VERSION
          
          echo "📦 Deployment package created"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: automationscout-deployment-${{ github.sha }}
          path: deployment-package/
          retention-days: 30

  # Release automation (on tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download deployment artifacts
        uses: actions/download-artifact@v3
        with:
          name: automationscout-deployment-${{ github.sha }}
          path: deployment-package/

      - name: Create release archive
        run: |
          cd deployment-package
          zip -r ../AutomationScout-${{ github.ref_name }}.zip .
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: AutomationScout-${{ github.ref_name }}.zip
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notification
  notify-completion:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-admin-portal, build-widget, integration-tests, code-quality, documentation]
    if: always()
    steps:
      - name: Build Status Summary
        run: |
          echo "🚀 AutomationScout CI/CD Pipeline Completed"
          echo "📊 Build Status Summary:"
          echo "  - Admin Portal: ${{ needs.build-admin-portal.result }}"
          echo "  - Widget Build: ${{ needs.build-widget.result }}"
          echo "  - Integration Tests: ${{ needs.integration-tests.result }}"
          echo "  - Code Quality: ${{ needs.code-quality.result }}"
          echo "  - Documentation: ${{ needs.documentation.result }}"
          
          if [ "${{ needs.build-admin-portal.result }}" = "success" ] && 
             [ "${{ needs.build-widget.result }}" = "success" ] && 
             [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "✅ All critical builds successful!"
          else
            echo "⚠️  Some builds failed - check logs above"
          fi